// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/reconciliaton_job/processer.go
//
// Generated by this command:
//
//	mockgen -source=./service/reconciliaton_job/processer.go -destination=test/mock/service/./reconciliaton_job/processer.go
//

// Package mock_reconciliatonjob is a generated GoMock package.
package mock_reconciliatonjob

import (
	context "context"
	reflect "reflect"

	filestorage "github.com/delly/amartha/repository/file_storage"
	dbgen "github.com/delly/amartha/repository/postgresql"
	gomock "go.uber.org/mock/gomock"
)

// MockProcesser is a mock of Processer interface.
type MockProcesser struct {
	ctrl     *gomock.Controller
	recorder *MockProcesserMockRecorder
}

// MockProcesserMockRecorder is the mock recorder for MockProcesser.
type MockProcesserMockRecorder struct {
	mock *MockProcesser
}

// NewMockProcesser creates a new mock instance.
func NewMockProcesser(ctrl *gomock.Controller) *MockProcesser {
	mock := &MockProcesser{ctrl: ctrl}
	mock.recorder = &MockProcesserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcesser) EXPECT() *MockProcesserMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockProcesser) Process(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockProcesserMockRecorder) Process(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProcesser)(nil).Process), ctx)
}

// MockProcesserRepository is a mock of ProcesserRepository interface.
type MockProcesserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProcesserRepositoryMockRecorder
}

// MockProcesserRepositoryMockRecorder is the mock recorder for MockProcesserRepository.
type MockProcesserRepositoryMockRecorder struct {
	mock *MockProcesserRepository
}

// NewMockProcesserRepository creates a new mock instance.
func NewMockProcesserRepository(ctrl *gomock.Controller) *MockProcesserRepository {
	mock := &MockProcesserRepository{ctrl: ctrl}
	mock.recorder = &MockProcesserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcesserRepository) EXPECT() *MockProcesserRepositoryMockRecorder {
	return m.recorder
}

// ListPendingReconciliationJobs mocks base method.
func (m *MockProcesserRepository) ListPendingReconciliationJobs(ctx context.Context) ([]dbgen.ReconciliationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingReconciliationJobs", ctx)
	ret0, _ := ret[0].([]dbgen.ReconciliationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingReconciliationJobs indicates an expected call of ListPendingReconciliationJobs.
func (mr *MockProcesserRepositoryMockRecorder) ListPendingReconciliationJobs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingReconciliationJobs", reflect.TypeOf((*MockProcesserRepository)(nil).ListPendingReconciliationJobs), ctx)
}

// SaveFailedReconciliationJob mocks base method.
func (m *MockProcesserRepository) SaveFailedReconciliationJob(ctx context.Context, arg dbgen.SaveFailedReconciliationJobParams) (dbgen.ReconciliationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFailedReconciliationJob", ctx, arg)
	ret0, _ := ret[0].(dbgen.ReconciliationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFailedReconciliationJob indicates an expected call of SaveFailedReconciliationJob.
func (mr *MockProcesserRepositoryMockRecorder) SaveFailedReconciliationJob(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFailedReconciliationJob", reflect.TypeOf((*MockProcesserRepository)(nil).SaveFailedReconciliationJob), ctx, arg)
}

// SaveSuccessReconciliationJob mocks base method.
func (m *MockProcesserRepository) SaveSuccessReconciliationJob(ctx context.Context, arg dbgen.SaveSuccessReconciliationJobParams) (dbgen.ReconciliationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSuccessReconciliationJob", ctx, arg)
	ret0, _ := ret[0].(dbgen.ReconciliationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSuccessReconciliationJob indicates an expected call of SaveSuccessReconciliationJob.
func (mr *MockProcesserRepositoryMockRecorder) SaveSuccessReconciliationJob(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSuccessReconciliationJob", reflect.TypeOf((*MockProcesserRepository)(nil).SaveSuccessReconciliationJob), ctx, arg)
}

// MockFileGetter is a mock of FileGetter interface.
type MockFileGetter struct {
	ctrl     *gomock.Controller
	recorder *MockFileGetterMockRecorder
}

// MockFileGetterMockRecorder is the mock recorder for MockFileGetter.
type MockFileGetterMockRecorder struct {
	mock *MockFileGetter
}

// NewMockFileGetter creates a new mock instance.
func NewMockFileGetter(ctrl *gomock.Controller) *MockFileGetter {
	mock := &MockFileGetter{ctrl: ctrl}
	mock.recorder = &MockFileGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileGetter) EXPECT() *MockFileGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockFileGetter) Get(ctx context.Context, filePath string) (*filestorage.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filePath)
	ret0, _ := ret[0].(*filestorage.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFileGetterMockRecorder) Get(ctx, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFileGetter)(nil).Get), ctx, filePath)
}
