// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/reconciliaton_job/finder.go
//
// Generated by this command:
//
//	mockgen -source=./service/reconciliaton_job/finder.go -destination=test/mock/service/./reconciliaton_job/finder.go
//

// Package mock_reconciliatonjob is a generated GoMock package.
package mock_reconciliatonjob

import (
	context "context"
	reflect "reflect"

	entity "github.com/delly/amartha/entity"
	dbgen "github.com/delly/amartha/repository/postgresql"
	gomock "go.uber.org/mock/gomock"
)

// MockFinder is a mock of Finder interface.
type MockFinder struct {
	ctrl     *gomock.Controller
	recorder *MockFinderMockRecorder
}

// MockFinderMockRecorder is the mock recorder for MockFinder.
type MockFinderMockRecorder struct {
	mock *MockFinder
}

// NewMockFinder creates a new mock instance.
func NewMockFinder(ctrl *gomock.Controller) *MockFinder {
	mock := &MockFinder{ctrl: ctrl}
	mock.recorder = &MockFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinder) EXPECT() *MockFinderMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockFinder) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockFinderMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockFinder)(nil).Count), ctx)
}

// FindAll mocks base method.
func (m *MockFinder) FindAll(ctx context.Context, limit, offset int32) ([]*entity.SimpleReconciliationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, limit, offset)
	ret0, _ := ret[0].([]*entity.SimpleReconciliationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockFinderMockRecorder) FindAll(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFinder)(nil).FindAll), ctx, limit, offset)
}

// FindByID mocks base method.
func (m *MockFinder) FindByID(ctx context.Context, id int64) (*entity.ReconciliationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.ReconciliationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockFinderMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockFinder)(nil).FindByID), ctx, id)
}

// MockFinderRepository is a mock of FinderRepository interface.
type MockFinderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFinderRepositoryMockRecorder
}

// MockFinderRepositoryMockRecorder is the mock recorder for MockFinderRepository.
type MockFinderRepositoryMockRecorder struct {
	mock *MockFinderRepository
}

// NewMockFinderRepository creates a new mock instance.
func NewMockFinderRepository(ctrl *gomock.Controller) *MockFinderRepository {
	mock := &MockFinderRepository{ctrl: ctrl}
	mock.recorder = &MockFinderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinderRepository) EXPECT() *MockFinderRepositoryMockRecorder {
	return m.recorder
}

// CountReconciliationJobs mocks base method.
func (m *MockFinderRepository) CountReconciliationJobs(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountReconciliationJobs", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountReconciliationJobs indicates an expected call of CountReconciliationJobs.
func (mr *MockFinderRepositoryMockRecorder) CountReconciliationJobs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountReconciliationJobs", reflect.TypeOf((*MockFinderRepository)(nil).CountReconciliationJobs), ctx)
}

// GetReconciliationJobById mocks base method.
func (m *MockFinderRepository) GetReconciliationJobById(ctx context.Context, id int64) (dbgen.ReconciliationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReconciliationJobById", ctx, id)
	ret0, _ := ret[0].(dbgen.ReconciliationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReconciliationJobById indicates an expected call of GetReconciliationJobById.
func (mr *MockFinderRepositoryMockRecorder) GetReconciliationJobById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReconciliationJobById", reflect.TypeOf((*MockFinderRepository)(nil).GetReconciliationJobById), ctx, id)
}

// ListReconciliationJobs mocks base method.
func (m *MockFinderRepository) ListReconciliationJobs(ctx context.Context, arg dbgen.ListReconciliationJobsParams) ([]dbgen.ListReconciliationJobsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReconciliationJobs", ctx, arg)
	ret0, _ := ret[0].([]dbgen.ListReconciliationJobsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReconciliationJobs indicates an expected call of ListReconciliationJobs.
func (mr *MockFinderRepositoryMockRecorder) ListReconciliationJobs(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReconciliationJobs", reflect.TypeOf((*MockFinderRepository)(nil).ListReconciliationJobs), ctx, arg)
}
